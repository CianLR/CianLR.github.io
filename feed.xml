<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.0">Jekyll</generator><link href="http://binarysear.ch/feed.xml" rel="self" type="application/atom+xml" /><link href="http://binarysear.ch/" rel="alternate" type="text/html" /><updated>2017-02-25T23:22:39+00:00</updated><id>http://binarysear.ch/</id><title type="html">BinarySear.ch - Cian Ruane</title><subtitle>Student of CPSSD in DCU, competitive programmer, former Google SRE intern.  Do you ever buy a cool domain and then feel obligated to actually do something with it? That's this. I'm planning to post updates on projects, competitions, and general software dev life.
</subtitle><entry><title type="html">Google HashCode 2017</title><link href="http://binarysear.ch/competitions/2017/02/25/hashcode2017.html" rel="alternate" type="text/html" title="Google HashCode 2017" /><published>2017-02-25T17:29:37+00:00</published><updated>2017-02-25T17:29:37+00:00</updated><id>http://binarysear.ch/competitions/2017/02/25/hashcode2017</id><content type="html" xml:base="http://binarysear.ch/competitions/2017/02/25/hashcode2017.html">&lt;p&gt;So &lt;a href=&quot;https://twitter.com/iandioch&quot;&gt;Noah&lt;/a&gt; (my fellow coursemate/soulmate) and I recently came 1st in Ireland (and 164th globally) in Google’s annual &lt;a href=&quot;https://hashcode.withgoogle.com/&quot;&gt;HashCode competition&lt;/a&gt;. We competed from the DCU hub with about 8 other teams, enjoing the perks such as pizza and Google merch. Our code is available on &lt;a href=&quot;https://github.com/iandioch/hashcode2017&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-problem-statement&quot;&gt;The Problem Statement&lt;/h3&gt;
&lt;p&gt;The problem statement is available &lt;a href=&quot;http://binarysear.ch/static/hashcode2017.pdf&quot;&gt;here&lt;/a&gt;. Typically the problem in HashCode takes the form of some large scale optimisation problem, generally something NP-hard. This year was no different.&lt;/p&gt;

&lt;p&gt;The challenge was to minimise the latency of fetching videos for a large number of users across a reasonably complex network.&lt;/p&gt;

&lt;p&gt;As a quick overview: We were given a number of endpoints, each of which make a known amount of requests for any particular videos. These endpoints are all connected to caches (of fixed size), most are connected to multiple. Storing a video in a cache means that the endpoint can pull the video from there as opposed to the datacenter (which has a higher latency). The goal is to minimise the average latency across all the requests.&lt;/p&gt;

&lt;p&gt;We were given four “scenarios” which varied the number of requests, caches, cache latencies, etc. You didn’t have to use the same solution for each of the scenarios (as we ended up not doing), they’d accept the best score for each across all of your submissions and sum the scores to produce the final result.&lt;/p&gt;

&lt;h3 id=&quot;our-solutions&quot;&gt;Our Solution(s)&lt;/h3&gt;
&lt;p&gt;To call our first solution “basic” would be an understatment. We had learned from previous years that it was always good to get points on the board early. This confirms you have some semblance of an end-to-end pipe, something that would be much harder to debug later on.&lt;/p&gt;

&lt;p&gt;This initial solution involved putting each video, as it was read in, into every cache until the caches were full. It netted us a surprising 764,566 points and 8th place on the global tables&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Needless to say it was a little less surprising when we were quickily overtaken.&lt;/p&gt;

&lt;p&gt;After that there was three hours of iterative development: trying smart things, trying not so smart things and trying combinations of both. Eventually the solution we ended with up with was &lt;a href=&quot;https://github.com/iandioch/hashcode2017/blob/master/cian_is_smart.py&quot;&gt;cian_is_smart.py&lt;/a&gt; (if you’ll excuse the naming convention). This produced a score of 2,285,891&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;We start by reading in all the data using a nice little&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; function defined in &lt;a href=&quot;https://github.com/iandioch/hashcode2017/blob/master/read_in.py&quot;&gt;read_in.py&lt;/a&gt;. The letters are defined in the problem statement, the rest are lists of objects corresponding to the type of data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python3&quot; data-lang=&quot;python3&quot;&gt;V, E, R, C, X, videos, endpoints, requests, caches = read()&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next step iterates through each of the caches. For each cache we create a &lt;code class=&quot;highlighter-rouge&quot;&gt;vids_wanted&lt;/code&gt; dictionary, this ties a score to each video object for how benificial it would be to the latency to place it in this cache.&lt;/p&gt;

&lt;p&gt;That score is calculated by going through each endpoint connected to the cache and for every video that endpoint requests we multiply the number of times it’s requested by the saving in latency if it were to be put in the current cache versus where it would be retrieved from otherwise (be it the datacenter or another cache).&lt;/p&gt;

&lt;p&gt;If that was hard to follow… well… the code isn’t great either.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pyhton3&quot; data-lang=&quot;pyhton3&quot;&gt;for cache in caches:
    vids_wanted = {}
    for endp in cache.endpoints:
        # lat_to_endp is the latency from cache -&amp;gt; endpoint
        # lat_redux is the total potential latency reduction per video
        lat_to_endp = cache.connected[endp.i]
        for vid, lat_redux in endp.get_wanted_vids(lat_to_endp).items():
            if vid in vids_wanted:
                vids_wanted[vid] += lat_redux
            else:
                vids_wanted[vid] = lat_redux&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And (a cleaned version of) the function inside &lt;code class=&quot;highlighter-rouge&quot;&gt;Endpoint&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python3&quot; data-lang=&quot;python3&quot;&gt;def get_wanted_vids(self, lat_to_cache):
    wanted = {}
    for req in self.requests:
        current_latency = self.dc_lat  # Latency to datacenter
        if req.video.i in self.cached_vid_ids:
            current_latency = self.cached_vid_ids[req.video.i]
        # If it would be an improvement add it to the wishlist
        if lat_to_cache &amp;lt; current_latency:
            wanted[req.video] = req.num_req * (current_latency - lat_to_cache)
    return wanted&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The ending of the solution is fairly predictable, we sort the videos on what makes the best impact and keep adding them to the cache in that order until it’s full. The &lt;code class=&quot;highlighter-rouge&quot;&gt;add_video&lt;/code&gt; method in &lt;code class=&quot;highlighter-rouge&quot;&gt;cache&lt;/code&gt; reaches back into each endpoint connected to it and updates the best latency for that video for later iterations.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python3&quot; data-lang=&quot;python3&quot;&gt;    vids_best_to_worst = sorted(
        vids_wanted,
        key=lambda v: vids_wanted[v],
        reverse=True)
    for vid in vids_best_to_worst:
        if cache.vid_fits(vid):
            cache.add_video(vid)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After the main loop exits the contents of each cache are printed in the format required by HashCode and we’re all done!&lt;/p&gt;

&lt;h3 id=&quot;retrospective&quot;&gt;Retrospective&lt;/h3&gt;

&lt;p&gt;So I’ve done out some pros and cons of our approach, hopefully they can help us and maybe other teams improve for later comps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We used Github to share code, this made thing very easy when sharing a file or fixing a bug.&lt;/li&gt;
  &lt;li&gt;We made a script for automatically running each of the inputs and zipping the source files. This probably wasn’t worth the time invested but was much more fun than doing it manually. &lt;a href=&quot;https://github.com/iandioch/hashcode2017/blob/master/gen_output.py&quot;&gt;gen_output.py&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Our more iterative approach probably helped us avoid super awkward bugs and didn’t seem to slow us down.&lt;/li&gt;
  &lt;li&gt;Having each of the data types represented by a class made it much easier to work with (as opposed to the dreaded, and inevitable, 3 dimensional undocumented list structure).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We didn’t get to do any fun graph stuff, max flow and things.&lt;/li&gt;
  &lt;li&gt;No proper versioning system for our code.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;We had no idea how long a particular idea would take to run, it often wasn’t obvious the time complexity of a method.&lt;/li&gt;
  &lt;li&gt;The code had a lot of redundancy, things are very often stored twice and everything points to everything else (given the time constraints you can forgive us I’m sure).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our winning evening finished with a trip to Doyle’s pub with another team for some gloating.&lt;/p&gt;

&lt;p&gt;Reach out to me on Twitter if you spot any of the typos I’ve surely left or just for clarification on anything.&lt;/p&gt;

&lt;p&gt;Adiós,&lt;/p&gt;

&lt;p&gt;-Cian&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;This was 30 minutes into the contest.&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Note that our final score was 2,416,068, roughly 130k better. A solution Noah had developed earlier produced a better output for one of the four test cases, I’ll edit with a link when he writes about it.&amp;nbsp;&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;The “little” is &lt;em&gt;very&lt;/em&gt; sarcastic. Here be dragons&amp;nbsp;&lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;Our first solution which I mentioned previously was called &lt;code class=&quot;highlighter-rouge&quot;&gt;shove_in.py&lt;/code&gt;, our next iteration was &lt;code class=&quot;highlighter-rouge&quot;&gt;shove_in_smarter.py&lt;/code&gt;, then followed &lt;code class=&quot;highlighter-rouge&quot;&gt;shove_in_even_smarter.py&lt;/code&gt; and it all culminated in &lt;code class=&quot;highlighter-rouge&quot;&gt;shove_in_a_little_smarter.py&lt;/code&gt; (after even_smarter’s disastrous results).&amp;nbsp;&lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">So Noah (my fellow coursemate/soulmate) and I recently came 1st in Ireland (and 164th globally) in Google’s annual HashCode competition. We competed from the DCU hub with about 8 other teams, enjoing the perks such as pizza and Google merch. Our code is available on Github.</summary></entry><entry><title type="html">Year += 1</title><link href="http://binarysear.ch/college/cpssd/dcu/2016/04/22/year-1.html" rel="alternate" type="text/html" title="Year += 1" /><published>2016-04-22T18:29:37+01:00</published><updated>2016-04-22T18:29:37+01:00</updated><id>http://binarysear.ch/college/cpssd/dcu/2016/04/22/year-1</id><content type="html" xml:base="http://binarysear.ch/college/cpssd/dcu/2016/04/22/year-1.html">&lt;p&gt;Today I had my very last lecture of first year; it’s definitely a weird feeling to be done.&lt;/p&gt;

&lt;p&gt;I wanted to write a post that summed up the year somewhat for prospective students as I wasn’t really sure what to expect when I was looking into CPSSD for my own CAO. I know my comrade Noah has done something similar here but it was for only the first semester.&lt;/p&gt;

&lt;p&gt;Without further ado, here’s my breakdown of the CPSSD coursework:&lt;/p&gt;

&lt;h2 id=&quot;ms121---it-mathmatics&quot;&gt;MS121 - IT Mathmatics&lt;/h2&gt;
&lt;p&gt;This is the maths module, mainly covering Leaving Cert higher level topics. If you did well in your LC maths then this shouldn’t bring about too much issue. It spans both semesters and finishes in a big exam worth 70%.&lt;/p&gt;

&lt;p&gt;A word of warning though: people from previous years have failed this module because they left all their work to last minute, you’d be surprised how quickily you can fall out of practice.&lt;/p&gt;

&lt;h2 id=&quot;ca172---problem-solving-creativity--critical-thinking&quot;&gt;CA172 - Problem-solving, Creativity &amp;amp; Critical Thinking&lt;/h2&gt;
&lt;p&gt;This module is all about thinking about thinking. Fair warning: you’re gonna hear the work “metacognition” a lot. It’s only for semester 1, it’s 50:50 continuous assessment to exam, there’s a manageable project.&lt;/p&gt;

&lt;p&gt;Overall: &lt;em&gt;You’ll be grand&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;ca103---computer-systems&quot;&gt;CA103 - Computer Systems&lt;/h2&gt;
&lt;p&gt;I didn’t actually do this semseter 1 module (I picked CA169 instead) but I’ve heard it’s actually pretty decent. You cover topics such as how data is stored on disk (spoiler: it’s binary) and how logic gates work.&lt;/p&gt;

&lt;p&gt;I’ve been told it’s the easiest module, your mileage may vary. But if you’re in CPSSD then chances are you’ve come across a decent bit of the course content already.&lt;/p&gt;

&lt;h2 id=&quot;ca169---networks-and-internets&quot;&gt;CA169 - Networks and Internets&lt;/h2&gt;
&lt;p&gt;This is option number two when you’re picking your modules and it’s in semester 2. This is definitely a tricky module if you’ve had no real prior experience with networks. It focuses mainly on the protocols at different layers in the TCP/IP stack with some practical elements coming in for the lab reports.&lt;/p&gt;

&lt;p&gt;I definitely feel I learned a good bit in this module, but it was tough.&lt;/p&gt;

&lt;h2 id=&quot;ca117---computer-programming-ii&quot;&gt;CA117 - Computer Programming II&lt;/h2&gt;
&lt;p&gt;This is a semester 2 module, it’s a continuation of CA116 that the Computer Applications students would have done the previous semester (CPSSDs get a buy to the next round). Basically, this module focuses on object oriented programming in Python and it also covers a bit of the more advanced syntax.&lt;/p&gt;

&lt;p&gt;If you’ve never used Python before it might be a good idea to get some practice in before starting but as long as you keep up with the labs, again, you’ll be grand.&lt;/p&gt;

&lt;h2 id=&quot;ca110---first-year-practicum&quot;&gt;CA110 - First Year Practicum&lt;/h2&gt;
&lt;p&gt;Finally, the big ‘un. This is the module that covers the project and also the Netflix problems. It’s 100% CA and is worth the same number of credits as all the other modules combined. The two semesters are quite different so I’ll hit you with a couple of paragraphs.&lt;/p&gt;

&lt;p&gt;In semester 1 we spent the first while going over some programming concepts such as recursion and trees. About half way through we were given a crop of programming excercises (known as Netflix problems because you get them all at once, see what they did there?). We had to pick 4 from 6 to complete.&lt;/p&gt;

&lt;p&gt;They were tricky enough and ranged from generating sentences from a corpus of tweets to implementing a spellchecker that used the minimum edit distance algorithm. There was also a team excercise where we were split into groups and had to work on a small project for 4 weeks.&lt;/p&gt;

&lt;p&gt;Semester 2 was entirely about the main project, in the last days of S1 we pitched ideas and formed teams (3 teams of 5, in the end) so we were able to get started straight away. The semester was broken into three “sprints” and for each one we had to pesent on our progress from the previous one and do a different presentation on what we planned to do for the next one.&lt;/p&gt;

&lt;p&gt;I felt the first semester was a decent warmup to the main focus of the year, the semseter 2 project, and I felt the project was a huge learning experience (I know it sounds cheesy). I was a decent individual coder so I felt that would translate well to the project, turns out groupwork is a whole different animal and I really had to learn a good bit about managing a team (shoutout to Noah and Aaron), dividing up work and the general politics of it all.&lt;/p&gt;

&lt;p&gt;So if you want my honest opinion, I really believe that CPSSD is the best computer-related course in the country (even if you have to keep telling people you’re studying “computers” rather than “Computational Problem Solving and Software Development”)&lt;/p&gt;

&lt;p&gt;I hope this summary was of some use to you! Keep in mind I’ve really only barely touched on the college experience, there’s things like societies, the Students’ Union, nights out (of course), and loads of other stuff. But you’ll figure that out fine.&lt;/p&gt;

&lt;p&gt;If you are a prospective student and you’ve got some questions about the course then feel free to get in contact with me! Links are in the sidebar.&lt;/p&gt;

&lt;p&gt;-Cian&lt;/p&gt;</content><author><name></name></author><summary type="html">Today I had my very last lecture of first year; it’s definitely a weird feeling to be done.</summary></entry></feed>